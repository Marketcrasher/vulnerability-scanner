import socket
import requests
from bs4 import BeautifulSoup

# Common SQL injection payloads
sql_injection_payloads = ["' OR '1'='1", "'; DROP TABLE users; --", "' OR 1=1--"]

# Target URL
target_url = "https://aquagoldjewelry.ca/"

# Step 1: Port Scanning
def scan_ports(host):
    open_ports = []
    common_ports = [80, 443, 8080, 21, 22]  # Add more ports if needed
    for port in common_ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)  # Timeout to avoid long waits
            result = sock.connect_ex((host, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        except socket.error:
            continue
    return open_ports

# Step 2: HTTP Header Security Check
def check_http_headers(url):
    response = requests.get(url)
    headers = response.headers
    issues = []

    # Security header checks
    if 'Content-Security-Policy' not in headers:
        issues.append("Missing Content-Security-Policy header.")
    if 'X-Frame-Options' not in headers:
        issues.append("Missing X-Frame-Options header.")
    if 'X-XSS-Protection' not in headers:
        issues.append("Missing X-XSS-Protection header.")
    if 'Strict-Transport-Security' not in headers:
        issues.append("Missing Strict-Transport-Security header.")
    return issues

# Step 3: SQL Injection Test
def test_sql_injection(url):
    vuln_points = []
    for payload in sql_injection_payloads:
        test_url = f"{url}?id={payload}"  # Test with vulnerable parameter
        response = requests.get(test_url)
        if "SQL syntax" in response.text or "mysql" in response.text.lower():
            vuln_points.append(test_url)
    return vuln_points

# Step 4: Run Scanner and Generate Report
def run_vulnerability_scanner():
    host = target_url.split("//")[-1].split("/")[0]
    
    print("Running vulnerability scanner...")
    print("\n--- Port Scanning ---")
    open_ports = scan_ports(host)
    print(f"Open Ports: {open_ports}")
    
    print("\n--- HTTP Header Security Check ---")
    header_issues = check_http_headers(target_url)
    for issue in header_issues:
        print(f"Issue: {issue}")
    
    print("\n--- SQL Injection Test ---")
    sql_vulnerabilities = test_sql_injection(target_url)
    for vuln_url in sql_vulnerabilities:
        print(f"Possible SQL Injection Vulnerability at: {vuln_url}")
    
    print("\n--- Scan Complete ---")
    if not open_ports and not header_issues and not sql_vulnerabilities:
        print("No issues found. Target seems secure.")
    else:
        print("Vulnerabilities found. Please review and address the issues.")

# Run the scanner
run_vulnerability_scanner()
